'''
    Exposure module
    Compute exposure and accessible area for proteins residues
    Author: Charles Abreu Santana
    Last update: 2020-04-29
'''
import os
import pandas as pd
import numpy as np
from Bio.PDB import HSExposure

class Exposure:
    # In: Protein instance, naccess drectory
    # Out: data frame with residue expose areas
    def run_naccess(self, protein, naccess_dir):
        os.system('./' + naccess_dir + os.sep + 'naccess -h ' + protein.file_name)
        # Insert columns in the protein matrix
        columns=['acc_rel', 'acc_side', 'acc_main', 'acc_apolar', 'acc_polar']
        for c in columns: protein.matrix[c] = np.nan
        # Fill matrix with area values from .rsa file
        with open(protein.pdb_id + '.rsa') as in_file: # .rsa file
            for line in in_file:
                # Lines with information about accessibela area
                if line.startswith('RES') or line.startswith('HEM'):
                    area =  get_value(line[22:28]) # All-atoms
                    # Ignore records with negative area
                    if area < 0: continue
                    # Fill data frame with values
                    residue_id = protein.pdb_id + get_residue_id(line)
                    protein.matrix.loc[residue_id] = get_areas(line)
        # delete files generated by naccess
        os.remove(protein.pdb_id + '.log')
        os.remove(protein.pdb_id + '.asa')
        os.remove(protein.pdb_id + '.rsa')

    # Compute Exposure imformation
    def compute_hse(self, protein):
        # Insert new columns in protein matrix
        columns=['hseu', 'hsed']
        for c in columns: protein.matrix[c] = np.nan
        # Compute residues exposure
        exp_cb = HSExposure.HSExposureCB(protein.structure[0])

        for key in exp_cb.keys():
            res_chain = key[0]
            res_number = key[1][1]
            try:
                res_name = protein.structure[0][res_chain][res_number].get_resname()
            except KeyError:
                continue

            sufix = res_chain +'_' + res_name + '_' + str(res_number)
            residue_id = protein.structure.get_id() + '_' + sufix
            # Fill data frame with values
            protein.matrix.loc[residue_id,'hseu'] = float(exp_cb[key][0])
            protein.matrix.loc[residue_id,'hsed'] = float(exp_cb[key][1])

#######################################################
# Toolbox Functions
#######################################################
# get area value from file record
def get_value(area_string):
    aux = float(area_string.strip())
    if aux < 100:
        return aux
    else:
        return 100.0
# get residues information name, number, chain
def get_residue_id(line):
    # Residue identifator
    res_name = line[4:7].strip()
    res_chain = line[8]
    res_number = line[9:13].strip()
    return  '_' + res_chain + '_' + res_name + '_' + res_number
# Get all values of areas
def get_areas(line):
    acc_rel = get_value(line[22:28]) # All-atoms
    acc_side = get_value(line[36:41]) # Total-Side
    acc_main = get_value(line[49:54])# Main-Chain
    acc_apolar = get_value(line[62:67]) # Non-polar
    acc_polar = get_value(line[75:80])# All polar

    return np.array([acc_rel,acc_side,acc_main,acc_apolar,acc_polar])

if __name__ == '__main__':
    print('')
